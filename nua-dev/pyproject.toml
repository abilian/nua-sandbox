[tool.poetry]
name = "nua-dev"
version = "0.1"
description = "Nua Dev - cli / code that runs on the development / build machine"
authors = [
    "Stefane Fermigier <sf@abilian.com>",
    "Jerome Dumonteil <jd@abilian.com>",
]
license = "MIT"
# readme = "README.md"
packages = [
    { include = "nua_dev", from = "src" },
]

[tool.poetry.scripts]
nua-dev = "nua_dev.cli:main"
nua-build-all = "nua_dev.tools.build_all:main"


[tool.poetry.dependencies]
python = "^3.10"
tomli = "^2.0.1"

# setuptools = "*"
jinja2 = "^3.1.2"
jsonschema = "^4.17.3"
json5 = "^0.9.11"
pygithub = "^1.58.1"
snoop = "^0.4.3"
tabulate = "^0.9.0"
cleez = "^0.1.7"


[tool.poetry.group.dev.dependencies]
abilian-devtools = "^0.4.18"
nox = "^2023.4.22"
types-jsonschema = "^4.17.0.7"

# types-setuptools = "*"
types-tabulate = "^0.9.0.2"

[tool.pytest.ini_options]
filterwarnings = [
    "ignore:.*distutils package:DeprecationWarning",
    "ignore::DeprecationWarning",
]


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# ---------------------------------------------------------------------------

[tool.ruff]
select = [
    "F",
    "E",
    "C90",
    "I",
    "UP",
    "N",
    "YTT",
    "B",
    "A",
    "C4",
    "ICN",
    "Q",
    "S",
    "BLE",
    "RET",
    "SIM",
    "TID",
    "RUF",
    "PLC", "PLE", "PLR", "PLW",
]
# Add later: "ANN", "ERA"...

exclude = [
    "src/cleez/testing.py",
#    ".tox",
#    ".nox",
#    "tests",
#    "sandbox",
#    "doc",
#    "scripts",
#    "tmp",
]

ignore = [
    "S101",  # Use of `assert` detected
    "SIM108", # Use ternary operator
    "A001",  # Shadowing of built-in
    "A002",  # Argument `input` is shadowing a python builtin
    "I001",  # Ruff not agreeing with isort
    "B904",
    "BLE001",
    "PLR0913",
    "S101",
    "S603",
    "S605",
    "S701",
]


[tool.pyright]
exclude = [
    '.tox',
    '.nox',
    'tests',
    'sandbox',
    'doc',
    'scripts',
    'tmp',
]
include = ["src"]

# pyright has issues with modules imported from a root __init__.py
reportPrivateImportUsage = false

# Temp
reportGeneralTypeIssues = false
reportMissingImports = false
reportOptionalSubscript = false
